// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// NOTE: To ensure UUIDs are generated at the database level, make sure your PostgreSQL columns have a default value of gen_random_uuid() or uuid_generate_v4().
// Prisma's @default(dbgenerated("('usr_' || gen_random_uuid())::text")) only affects migrations generated by Prisma, not manual SQL or existing tables.
// Example SQL to run in your database for each UUID primary key:
//   CREATE EXTENSION IF NOT EXISTS "pgcrypto";
//   ALTER TABLE "users" ALTER COLUMN "userId" SET DEFAULT gen_random_uuid();
//   ALTER TABLE "roles" ALTER COLUMN "roleId" SET DEFAULT gen_random_uuid();
//   ALTER TABLE "products" ALTER COLUMN "productId" SET DEFAULT gen_random_uuid();
//   ALTER TABLE "sales" ALTER COLUMN "saleId" SET DEFAULT gen_random_uuid();
//   ALTER TABLE "purchases" ALTER COLUMN "purchaseId" SET DEFAULT gen_random_uuid();
//   ALTER TABLE "productPurchases" ALTER COLUMN "productPurchaseId" SET DEFAULT gen_random_uuid();
//   ALTER TABLE "productSales" ALTER COLUMN "productSaleId" SET DEFAULT gen_random_uuid();
// If you use uuid-ossp, replace gen_random_uuid() with uuid_generate_v4().

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                  String            @id @default(dbgenerated("('usr_' || gen_random_uuid())::text"))
  firstName               String
  surName                 String?
  lastName                String
  profilePictureUrl       String?
  email                   String            @unique
  password                String
  createdAt               DateTime          @default(now())
  deletedAt               DateTime?
  createdBy               String?
  deletedBy               String?
  isDeleted               Boolean           @default(false)
  createdRoles            Role[]            @relation("RoleCreatedBy")
  deletedRoles            Role[]            @relation("RoleDeletedBy")
  updatedRoles            Role[]            @relation("RoleUpdatedBy")
  createdProducts         Product[]         @relation("ProductCreatedBy")
  deletedProducts         Product[]         @relation("ProductDeletedBy")
  updatedProducts         Product[]         @relation("ProductUpdatedBy")
  createdSales            Sale[]            @relation("SaleCreatedBy")
  deletedSales            Sale[]            @relation("SaleDeletedBy")
  updatedSales            Sale[]            @relation("SaleUpdatedBy")
  createdPurchases        Purchase[]        @relation("PurchaseCreatedBy")
  deletedPurchases        Purchase[]        @relation("PurchaseDeletedBy")
  updatedPurchases        Purchase[]        @relation("PurchaseUpdatedBy")
  createdProductPurchases ProductPurchase[] @relation("ProductPurchaseCreatedBy")
  deletedProductPurchases ProductPurchase[] @relation("ProductPurchaseDeletedBy")
  updatedProductPurchases ProductPurchase[] @relation("ProductPurchaseUpdatedBy")
  createdProductSales     ProductSale[]     @relation("ProductSaleCreatedBy")
  deletedProductSales     ProductSale[]     @relation("ProductSaleDeletedBy")
  updatedProductSales     ProductSale[]     @relation("ProductSaleUpdatedBy")
  createdCustomer         Customer[]        @relation("CustomerCreatedBy")
  deletedCustomer         Customer[]        @relation("CustomerDeletedBy")
  updatedCustomer         Customer[]        @relation("CustomerUpdatedBy")

  roleId             String
  role               Role       @relation(fields: [roleId], references: [roleId])
  ownedProducts      Product[]
  customersInContact Customer[]

  @@map("users")
}

model Role {
  roleId        String    @id @default(dbgenerated("('usr_' || gen_random_uuid())::text"))
  roleType      String    @unique
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
  createdBy     String?
  deletedBy     String?
  updatedBy     String?
  updatedAt     DateTime?
  createdByUser User?     @relation("RoleCreatedBy", fields: [createdBy], references: [userId])
  deletedByUser User?     @relation("RoleDeletedBy", fields: [deletedBy], references: [userId])
  updatedByUser User?     @relation("RoleUpdatedBy", fields: [updatedBy], references: [userId])
  isDeleted     Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  users         User[]

  @@map("roles")
}

model Product {
  productId       String            @id @default(dbgenerated("('usr_' || gen_random_uuid())::text"))
  name            String
  imageUrl        String
  description     String
  category        String
  expiryDate      DateTime?
  productionDate  DateTime?
  quantity        Int
  price           Float
  costPrice       Float
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  createdBy       String?
  deletedBy       String?
  updatedBy       String?
  updatedAt       DateTime?
  createdByUser   User?             @relation("ProductCreatedBy", fields: [createdBy], references: [userId])
  deletedByUser   User?             @relation("ProductDeletedBy", fields: [deletedBy], references: [userId])
  updatedByUser   User?             @relation("ProductUpdatedBy", fields: [updatedBy], references: [userId])
  isDeleted       Boolean           @default(false)
  userId          String
  user            User              @relation(fields: [userId], references: [userId])
  productPurchase ProductPurchase[]
  productSale     ProductSale[]

  @@map("products")
}

model Sale {
  saleId        String        @id @default(dbgenerated("('usr_' || gen_random_uuid())::text"))
  createdAt     DateTime      @default(now())
  deletedAt     DateTime?
  createdBy     String?
  deletedBy     String?
  updatedBy     String?
  updatedAt     DateTime?
  createdByUser User?         @relation("SaleCreatedBy", fields: [createdBy], references: [userId])
  deletedByUser User?         @relation("SaleDeletedBy", fields: [deletedBy], references: [userId])
  updatedByUser User?         @relation("SaleUpdatedBy", fields: [updatedBy], references: [userId])
  isDeleted     Boolean       @default(false)
  productSale   ProductSale[]

  @@map("sales")
}

model Purchase {
  purchaseId      String            @id @default(dbgenerated("('usr_' || gen_random_uuid())::text"))
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  createdBy       String?
  deletedBy       String?
  updatedBy       String?
  updatedAt       DateTime?
  createdByUser   User?             @relation("PurchaseCreatedBy", fields: [createdBy], references: [userId])
  deletedByUser   User?             @relation("PurchaseDeletedBy", fields: [deletedBy], references: [userId])
  updatedByUser   User?             @relation("PurchaseUpdatedBy", fields: [updatedBy], references: [userId])
  isDeleted       Boolean           @default(false)
  productId       String
  productPurchase ProductPurchase[]

  @@map("purchases")
}

model ProductPurchase {
  productPurchaseId String    @id @default(dbgenerated("('usr_' || gen_random_uuid())::text"))
  purchasePrice     Float
  purchaseQuantity  Int
  createdAt         DateTime  @default(now())
  deletedAt         DateTime?
  createdBy         String?
  deletedBy         String?
  updatedBy         String?
  updatedAt         DateTime?
  createdByUser     User?     @relation("ProductPurchaseCreatedBy", fields: [createdBy], references: [userId])
  deletedByUser     User?     @relation("ProductPurchaseDeletedBy", fields: [deletedBy], references: [userId])
  updatedByUser     User?     @relation("ProductPurchaseUpdatedBy", fields: [updatedBy], references: [userId])
  isDeleted         Boolean   @default(false)
  productId         String
  purchaseId        String
  product           Product   @relation(fields: [productId], references: [productId])
  purchase          Purchase  @relation(fields: [purchaseId], references: [purchaseId])

  @@map("productPurchases")
}

model ProductSale {
  productSaleId String    @id @default(dbgenerated("('usr_' || gen_random_uuid())::text"))
  salePrice     Float
  saleQuantity  Int
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
  createdBy     String?
  deletedBy     String?
  updatedBy     String?
  updatedAt     DateTime?
  createdByUser User?     @relation("ProductSaleCreatedBy", fields: [createdBy], references: [userId])
  deletedByUser User?     @relation("ProductSaleDeletedBy", fields: [deletedBy], references: [userId])
  updatedByUser User?     @relation("ProductSaleUpdatedBy", fields: [updatedBy], references: [userId])
  isDeleted     Boolean   @default(false)
  productId     String
  saleId        String
  product       Product   @relation(fields: [productId], references: [productId])
  sale          Sale      @relation(fields: [saleId], references: [saleId])

  @@map("productSales")
}

model Customer {
  customerId    String    @id @default(dbgenerated("('usr_' || gen_random_uuid())::text"))
  firstName     String
  lastName      String
  email         String    @unique
  phone         String
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime?
  createdBy     String?
  deletedBy     String?
  updatedBy     String?
  isDeleted     Boolean   @default(false)
  createdByUser User?     @relation("CustomerCreatedBy", fields: [createdBy], references: [userId])
  deletedByUser User?     @relation("CustomerDeletedBy", fields: [deletedBy], references: [userId])
  updatedByUser User?     @relation("CustomerUpdatedBy", fields: [updatedBy], references: [userId])
  userId        String
  user          User      @relation(fields: [userId], references: [userId])

  @@map("customers")
}

// I'm thinking of adding a new model for the inventory management system called `customer`.
