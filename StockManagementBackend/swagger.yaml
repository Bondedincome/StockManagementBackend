openapi: 3.0.0
info:
  title: Stock Management API
  version: 1.0.0
  description: API documentation for Stock Management System
servers:
  - url: http://localhost:3000
paths:
  /api/users:
    get:
      summary: Get all users
      tags: [Users]
      responses:
        "200":
          description: List of users
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                surName:
                  type: string
                profilePicture:
                  type: string
                  format: binary
                email:
                  type: string
                password:
                  type: string
                roleId:
                  type: string
      responses:
        "201":
          description: User created
  /api/users/{id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID (UUID)
      responses:
        "200":
          description: User found
        "404":
          description: User not found
    put:
      summary: Update a user
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: User updated
    delete:
      summary: Delete a user
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID (UUID)
      responses:
        "200":
          description: User deleted
  /api/users/login:
    post:
      summary: Login user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials
  /api/users/register:
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User registered
  /api/roles:
    get:
      summary: Get all roles
      tags: [Roles]
      responses:
        "200":
          description: List of roles
    post:
      summary: Create a new role
      tags: [Roles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInput"
      responses:
        "201":
          description: Role created
  /api/roles/{id}:
    get:
      summary: Get a role by ID
      tags: [Roles]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Role ID (UUID)
      responses:
        "200":
          description: Role found
        "404":
          description: Role not found
    put:
      summary: Update a role
      tags: [Roles]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Role ID (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInput"
      responses:
        "200":
          description: Role updated
    delete:
      summary: Delete a role
      tags: [Roles]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Role ID (UUID)
      responses:
        "200":
          description: Role deleted
  /api/product/:
    get:
      summary: Get all products
      tags: [Products]
      responses:
        "200":
          description: List of products
    post:
      summary: Create a new product
      tags: [Products]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                quantity:
                  type: integer
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Product created
  /api/product/{id}:
    get:
      summary: Get a product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID (UUID)
      responses:
        "200":
          description: Product found
        "404":
          description: Product not found
    put:
      summary: Update a product
      tags: [Products]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                quantity:
                  type: integer
      responses:
        "200":
          description: Product updated
    delete:
      summary: Delete a product
      tags: [Products]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID (UUID)
      responses:
        "200":
          description: Product deleted
  /api/sales/:
    get:
      summary: Get all sales
      tags: [Sales]
      responses:
        "200":
          description: List of sales
    post:
      summary: Create a new sale
      tags: [Sales]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
                totalPrice:
                  type: number
      responses:
        "201":
          description: Sale created
  /api/sales/{id}:
    get:
      summary: Get a sale by ID
      tags: [Sales]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Sale ID (UUID)
      responses:
        "200":
          description: Sale found
        "404":
          description: Sale not found
    put:
      summary: Update a sale
      tags: [Sales]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Sale ID (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
                totalPrice:
                  type: number
      responses:
        "200":
          description: Sale updated
    delete:
      summary: Delete a sale
      tags: [Sales]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Sale ID (UUID)
      responses:
        "200":
          description: Sale deleted
  /api/purchase/:
    get:
      summary: Get all purchases
      tags: [Purchases]
      responses:
        "200":
          description: List of purchases
    post:
      summary: Create a new purchase
      tags: [Purchases]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
                totalPrice:
                  type: number
      responses:
        "201":
          description: Purchase created
  /api/purchase/{id}:
    get:
      summary: Get a purchase by ID
      tags: [Purchases]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Purchase ID (UUID)
      responses:
        "200":
          description: Purchase found
        "404":
          description: Purchase not found
    put:
      summary: Update a purchase
      tags: [Purchases]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Purchase ID (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
                totalPrice:
                  type: number
      responses:
        "200":
          description: Purchase updated
    delete:
      summary: Delete a purchase
      tags: [Purchases]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Purchase ID (UUID)
      responses:
        "200":
          description: Purchase deleted
  /api/upload:
    post:
      summary: Upload a file
      tags: [File Upload]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: File uploaded successfully
        "400":
          description: Bad request, file not provided or invalid format
  /api/customers:
    get:
      summary: Get all customers
      tags: [Customers]
      responses:
        "200":
          description: List of customers
    post:
      summary: Create a new customer
      tags: [Customers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: Customer created
  /api/customers/{id}:
    get:
      summary: Get a customer by ID
      tags: [Customers]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Customer ID (UUID)
      responses:
        "200":
          description: Customer found
        "404":
          description: Customer not found
    put:
      summary: Update a customer
      tags: [Customers]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Customer ID (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: Customer updated
    delete:
      summary: Delete a customer
      tags: [Customers]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Customer ID (UUID)
      responses:
        "200":
          description: Customer deleted
  /api/products/paginated:
    get:
      summary: Get paginated products
      tags: [Products]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Items per page
      responses:
        "200":
          description: Paginated product list

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserInput:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        surName:
          type: string
        profilePictureUrl:
          type: string
        email:
          type: string
        password:
          type: string
        roleId:
          type: string
      required:
        - firstName
        - lastName
        - email
        - password
        - roleId
    RoleInput:
      type: object
      properties:
        roleType:
          type: string
        isAdmin:
          type: boolean
      required:
        - roleType
    SaleInput:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: integer
        totalPrice:
          type: number
      required:
        - productId
        - quantity
        - totalPrice
    PurchaseInput:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: integer
        totalPrice:
          type: number
      required:
        - productId
        - quantity
        - totalPrice
    ProductInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        quantity:
          type: integer
      required:
        - name
        - price
        - quantity
    FileUploadResponse:
      type: object
      properties:
        message:
          type: string
        fileUrl:
          type: string
      required:
        - message
        - fileUrl
